{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "65f2a903-f5ce-4c53-90ea-36add25eb885",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import os\n",
    "from pathlib import Path\n",
    "from io import StringIO\n",
    "\n",
    "def process_and_save_csv(file_content, file_name):\n",
    "    # Load the data\n",
    "    data = pd.read_csv(StringIO(file_content))\n",
    "    \n",
    "    # Convert 'Time' column to datetime and set as index\n",
    "    data['Time'] = pd.to_datetime(data['Time'])\n",
    "    data.set_index('Time', inplace=True)\n",
    "    \n",
    "    # Remove duplicates based on index\n",
    "    data = data[~data.index.duplicated(keep='first')]\n",
    "    \n",
    "    # Resample to hourly and daily averages\n",
    "    hourly_data = data.resample('H').mean()\n",
    "    daily_data = data.resample('D').mean()\n",
    "\n",
    "    # Ensure continuous datetime range for both hourly and daily data\n",
    "    all_hours = pd.date_range(start=hourly_data.index.min(), end=hourly_data.index.max(), freq='H')\n",
    "    all_days = pd.date_range(start=daily_data.index.min(), end=daily_data.index.max(), freq='D')\n",
    "    \n",
    "    hourly_data = hourly_data.reindex(all_hours)\n",
    "    daily_data = daily_data.reindex(all_days)\n",
    "\n",
    "   # Convert DataFrames to CSV format\n",
    "    hourly_csv = hourly_data.to_csv(index=True)\n",
    "    daily_csv = daily_data.to_csv(index=True)\n",
    "\n",
    "    return hourly_csv, daily_csv\n",
    "\n",
    "# Main function to run the app\n",
    "def main():\n",
    "    st.title('CSV Data Processing Tool')\n",
    "\n",
    "    # Allow user to upload CSV files\n",
    "    uploaded_files = st.file_uploader('Upload CSV files', type=['csv'], accept_multiple_files=True)\n",
    "\n",
    "    if uploaded_files:\n",
    "        for file in uploaded_files:\n",
    "            file_name = file.name\n",
    "            file_content = file.getvalue()\n",
    "            \n",
    "             if st.button('Start Processing'):\n",
    "                with st.spinner(f'Processing {file_name}...'):\n",
    "                    hourly_csv, daily_csv = process_and_save_csv(file_content, file_name)\n",
    "                \n",
    "                # Display the processed files\n",
    "                st.write('### Hourly Averages')\n",
    "                st.write(hourly_csv, unsafe_allow_html=True)\n",
    "                st.write('### Daily Averages')\n",
    "                st.write(daily_csv, unsafe_allow_html=True)\n",
    "\n",
    "                # Add download buttons\n",
    "                st.markdown(get_download_link(hourly_csv, f'{file_name}_Hourly_Averages.csv'), unsafe_allow_html=True)\n",
    "                st.markdown(get_download_link(daily_csv, f'{file_name}_Daily_Averages.csv'), unsafe_allow_html=True)\n",
    "\n",
    "# Function to create a download link for a CSV file\n",
    "def get_download_link(csv_content, file_name):\n",
    "    csv = csv_content.encode()\n",
    "    b64 = base64.b64encode(csv).decode()\n",
    "    href = f'<a href=\"data:file/csv;base64,{b64}\" download=\"{file_name}\">Download {file_name}</a>'\n",
    "    return href\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    main()\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
